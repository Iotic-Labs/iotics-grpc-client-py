"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright (c) 2019-2022 Iotic Labs Ltd. All rights reserved.

Iotics Web protocol definitions (interests)
"""
import abc
import collections.abc
import grpc
import iotics.api.interest_pb2

class InterestAPIStub:
    """---------------------------------------------------------------------------------------------------------------------

    InterestAPI enables creation and management of interests between a twin and a feed.
    """

    def __init__(self, channel: grpc.Channel) -> None: ...
    FetchInterests: grpc.UnaryStreamMultiCallable[
        iotics.api.interest_pb2.FetchInterestRequest,
        iotics.api.interest_pb2.FetchInterestResponse,
    ]
    """Fetch feed data for this interest. (local and remote)"""
    FetchLastStored: grpc.UnaryUnaryMultiCallable[
        iotics.api.interest_pb2.FetchLastStoredRequest,
        iotics.api.interest_pb2.FetchInterestResponse,
    ]
    """Fetch last data shared on this interest. (local and remote)"""
    SendInputMessage: grpc.UnaryUnaryMultiCallable[
        iotics.api.interest_pb2.SendInputMessageRequest,
        iotics.api.interest_pb2.SendInputMessageResponse,
    ]
    """Send a message to an input. (local and remote)"""

class InterestAPIServicer(metaclass=abc.ABCMeta):
    """---------------------------------------------------------------------------------------------------------------------

    InterestAPI enables creation and management of interests between a twin and a feed.
    """

    @abc.abstractmethod
    def FetchInterests(
        self,
        request: iotics.api.interest_pb2.FetchInterestRequest,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[iotics.api.interest_pb2.FetchInterestResponse]:
        """Fetch feed data for this interest. (local and remote)"""
    @abc.abstractmethod
    def FetchLastStored(
        self,
        request: iotics.api.interest_pb2.FetchLastStoredRequest,
        context: grpc.ServicerContext,
    ) -> iotics.api.interest_pb2.FetchInterestResponse:
        """Fetch last data shared on this interest. (local and remote)"""
    @abc.abstractmethod
    def SendInputMessage(
        self,
        request: iotics.api.interest_pb2.SendInputMessageRequest,
        context: grpc.ServicerContext,
    ) -> iotics.api.interest_pb2.SendInputMessageResponse:
        """Send a message to an input. (local and remote)"""

def add_InterestAPIServicer_to_server(servicer: InterestAPIServicer, server: grpc.Server) -> None: ...

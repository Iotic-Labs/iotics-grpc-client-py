"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright (c) 2019-2022 Iotic Labs Ltd. All rights reserved.

Iotics Web protocol definitions (feed)
"""
import abc
import grpc
import iotics.api.feed_pb2

class FeedAPIStub:
    """---------------------------------------------------------------------------------------------------------------------

    Create a feed owned by the provided twin.
    A twin may have one or more feeds. Any twin can subscribe to a feed (access control permitting).
    A feed generates data in a 1-to-many relationship: one feed may produce data that is used by many consumers (twins).
    Services only affect local resources, unless stated otherwise.
    """

    def __init__(self, channel: grpc.Channel) -> None: ...
    CreateFeed: grpc.UnaryUnaryMultiCallable[
        iotics.api.feed_pb2.CreateFeedRequest,
        iotics.api.feed_pb2.CreateFeedResponse,
    ]
    """Creates a feed owned by a twin. (Idempotent)"""
    DeleteFeed: grpc.UnaryUnaryMultiCallable[
        iotics.api.feed_pb2.DeleteFeedRequest,
        iotics.api.feed_pb2.DeleteFeedResponse,
    ]
    """Deletes a feed owned by a twin. (Idempotent)"""
    UpdateFeed: grpc.UnaryUnaryMultiCallable[
        iotics.api.feed_pb2.UpdateFeedRequest,
        iotics.api.feed_pb2.UpdateFeedResponse,
    ]
    """Updates attributes of a feed, including its metadata."""
    ShareFeedData: grpc.UnaryUnaryMultiCallable[
        iotics.api.feed_pb2.ShareFeedDataRequest,
        iotics.api.feed_pb2.ShareFeedDataResponse,
    ]
    """Shares a new sample of data for the given feed which any (interest) subscribers can receive."""
    ListAllFeeds: grpc.UnaryUnaryMultiCallable[
        iotics.api.feed_pb2.ListAllFeedsRequest,
        iotics.api.feed_pb2.ListAllFeedsResponse,
    ]
    """Lists all feeds owned by a twin."""
    DescribeFeed: grpc.UnaryUnaryMultiCallable[
        iotics.api.feed_pb2.DescribeFeedRequest,
        iotics.api.feed_pb2.DescribeFeedResponse,
    ]
    """Describes a feed. (local and remote)"""

class FeedAPIServicer(metaclass=abc.ABCMeta):
    """---------------------------------------------------------------------------------------------------------------------

    Create a feed owned by the provided twin.
    A twin may have one or more feeds. Any twin can subscribe to a feed (access control permitting).
    A feed generates data in a 1-to-many relationship: one feed may produce data that is used by many consumers (twins).
    Services only affect local resources, unless stated otherwise.
    """

    @abc.abstractmethod
    def CreateFeed(
        self,
        request: iotics.api.feed_pb2.CreateFeedRequest,
        context: grpc.ServicerContext,
    ) -> iotics.api.feed_pb2.CreateFeedResponse:
        """Creates a feed owned by a twin. (Idempotent)"""
    @abc.abstractmethod
    def DeleteFeed(
        self,
        request: iotics.api.feed_pb2.DeleteFeedRequest,
        context: grpc.ServicerContext,
    ) -> iotics.api.feed_pb2.DeleteFeedResponse:
        """Deletes a feed owned by a twin. (Idempotent)"""
    @abc.abstractmethod
    def UpdateFeed(
        self,
        request: iotics.api.feed_pb2.UpdateFeedRequest,
        context: grpc.ServicerContext,
    ) -> iotics.api.feed_pb2.UpdateFeedResponse:
        """Updates attributes of a feed, including its metadata."""
    @abc.abstractmethod
    def ShareFeedData(
        self,
        request: iotics.api.feed_pb2.ShareFeedDataRequest,
        context: grpc.ServicerContext,
    ) -> iotics.api.feed_pb2.ShareFeedDataResponse:
        """Shares a new sample of data for the given feed which any (interest) subscribers can receive."""
    @abc.abstractmethod
    def ListAllFeeds(
        self,
        request: iotics.api.feed_pb2.ListAllFeedsRequest,
        context: grpc.ServicerContext,
    ) -> iotics.api.feed_pb2.ListAllFeedsResponse:
        """Lists all feeds owned by a twin."""
    @abc.abstractmethod
    def DescribeFeed(
        self,
        request: iotics.api.feed_pb2.DescribeFeedRequest,
        context: grpc.ServicerContext,
    ) -> iotics.api.feed_pb2.DescribeFeedResponse:
        """Describes a feed. (local and remote)"""

def add_FeedAPIServicer_to_server(servicer: FeedAPIServicer, server: grpc.Server) -> None: ...

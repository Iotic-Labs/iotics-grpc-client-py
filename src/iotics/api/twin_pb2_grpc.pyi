"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright (c) 2019-2022 Iotic Labs Ltd. All rights reserved.

Iotics Web protocol definitions (twins)
"""
import abc
import grpc
import iotics.api.twin_pb2

class TwinAPIStub:
    """---------------------------------------------------------------------------------------------------------------------

    TwinAPI enables creation and management of Iotics twins.
    Services only affect local resources, unless stated otherwise.
    """

    def __init__(self, channel: grpc.Channel) -> None: ...
    CreateTwin: grpc.UnaryUnaryMultiCallable[
        iotics.api.twin_pb2.CreateTwinRequest,
        iotics.api.twin_pb2.CreateTwinResponse,
    ]
    """CreateTwin creates a twin."""
    UpsertTwin: grpc.UnaryUnaryMultiCallable[
        iotics.api.twin_pb2.UpsertTwinRequest,
        iotics.api.twin_pb2.UpsertTwinResponse,
    ]
    """UpsertTwin creates or update a twin with its metadata + the twin feeds with their metadata.
    The full state is applied (ie. if the operation succeeds the state of the twin/feeds will be the one
    described in the payload)
    """
    DeleteTwin: grpc.UnaryUnaryMultiCallable[
        iotics.api.twin_pb2.DeleteTwinRequest,
        iotics.api.twin_pb2.DeleteTwinResponse,
    ]
    """DeleteTwin deletes a twin."""
    UpdateTwin: grpc.UnaryUnaryMultiCallable[
        iotics.api.twin_pb2.UpdateTwinRequest,
        iotics.api.twin_pb2.UpdateTwinResponse,
    ]
    """UpdateTwin updates a twin (partial update)."""
    DescribeTwin: grpc.UnaryUnaryMultiCallable[
        iotics.api.twin_pb2.DescribeTwinRequest,
        iotics.api.twin_pb2.DescribeTwinResponse,
    ]
    """Describes a twin. (local and remote)"""
    ListAllTwins: grpc.UnaryUnaryMultiCallable[
        iotics.api.twin_pb2.ListAllTwinsRequest,
        iotics.api.twin_pb2.ListAllTwinsResponse,
    ]
    """List all twins."""

class TwinAPIServicer(metaclass=abc.ABCMeta):
    """---------------------------------------------------------------------------------------------------------------------

    TwinAPI enables creation and management of Iotics twins.
    Services only affect local resources, unless stated otherwise.
    """

    @abc.abstractmethod
    def CreateTwin(
        self,
        request: iotics.api.twin_pb2.CreateTwinRequest,
        context: grpc.ServicerContext,
    ) -> iotics.api.twin_pb2.CreateTwinResponse:
        """CreateTwin creates a twin."""
    @abc.abstractmethod
    def UpsertTwin(
        self,
        request: iotics.api.twin_pb2.UpsertTwinRequest,
        context: grpc.ServicerContext,
    ) -> iotics.api.twin_pb2.UpsertTwinResponse:
        """UpsertTwin creates or update a twin with its metadata + the twin feeds with their metadata.
        The full state is applied (ie. if the operation succeeds the state of the twin/feeds will be the one
        described in the payload)
        """
    @abc.abstractmethod
    def DeleteTwin(
        self,
        request: iotics.api.twin_pb2.DeleteTwinRequest,
        context: grpc.ServicerContext,
    ) -> iotics.api.twin_pb2.DeleteTwinResponse:
        """DeleteTwin deletes a twin."""
    @abc.abstractmethod
    def UpdateTwin(
        self,
        request: iotics.api.twin_pb2.UpdateTwinRequest,
        context: grpc.ServicerContext,
    ) -> iotics.api.twin_pb2.UpdateTwinResponse:
        """UpdateTwin updates a twin (partial update)."""
    @abc.abstractmethod
    def DescribeTwin(
        self,
        request: iotics.api.twin_pb2.DescribeTwinRequest,
        context: grpc.ServicerContext,
    ) -> iotics.api.twin_pb2.DescribeTwinResponse:
        """Describes a twin. (local and remote)"""
    @abc.abstractmethod
    def ListAllTwins(
        self,
        request: iotics.api.twin_pb2.ListAllTwinsRequest,
        context: grpc.ServicerContext,
    ) -> iotics.api.twin_pb2.ListAllTwinsResponse:
        """List all twins."""

def add_TwinAPIServicer_to_server(servicer: TwinAPIServicer, server: grpc.Server) -> None: ...

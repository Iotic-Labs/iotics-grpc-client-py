"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright (c) 2019-2022 Iotic Labs Ltd. All rights reserved.

Iotics Web protocol definitions (meta)
"""
import abc
import collections.abc
import grpc
import iotics.api.meta_pb2

class MetaAPIStub:
    """---------------------------------------------------------------------------------------------------------------------

    MetaAPI enables querying of metadata associated with Twins and Feeds.
    Services only affect local resources, unless stated otherwise.
    """

    def __init__(self, channel: grpc.Channel) -> None: ...
    SparqlQuery: grpc.UnaryStreamMultiCallable[
        iotics.api.meta_pb2.SparqlQueryRequest,
        iotics.api.meta_pb2.SparqlQueryResponse,
    ]
    """SparqlQuery performs a SPARQL 1.1 query and returns one or more results, each as a sequence of chunks. Note that:
    - Chunks for a particular result will arrive in-order though they might be interleaved with chunks from other
      results (when performing a non-local query). See scope parameter in SparqlQueryRequest;
    - The call will only complete once the (specified or host default) request timeout has been reached. The client can
      choose to end the stream early once they have received enough results. (E.g. in the case of Scope.LOCAL this
      would be after the one and only sequence of chunks has been received.). (local and remote)
    """
    SparqlUpdate: grpc.UnaryUnaryMultiCallable[
        iotics.api.meta_pb2.SparqlUpdateRequest,
        iotics.api.meta_pb2.SparqlUpdateResponse,
    ]
    """SparqlUpdate performs a SPARQL 1.1 update. When performing an update, the update query must contain a reference to
    one of the following graph IRIs:
    1. http://data.iotics.com/graph#custom-public (aka custom public graph) - All metadata written to this graph will be
       visible during SPARQL queries both with local & global scope (and thus, the Iotics network).
    """

class MetaAPIServicer(metaclass=abc.ABCMeta):
    """---------------------------------------------------------------------------------------------------------------------

    MetaAPI enables querying of metadata associated with Twins and Feeds.
    Services only affect local resources, unless stated otherwise.
    """

    @abc.abstractmethod
    def SparqlQuery(
        self,
        request: iotics.api.meta_pb2.SparqlQueryRequest,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[iotics.api.meta_pb2.SparqlQueryResponse]:
        """SparqlQuery performs a SPARQL 1.1 query and returns one or more results, each as a sequence of chunks. Note that:
        - Chunks for a particular result will arrive in-order though they might be interleaved with chunks from other
          results (when performing a non-local query). See scope parameter in SparqlQueryRequest;
        - The call will only complete once the (specified or host default) request timeout has been reached. The client can
          choose to end the stream early once they have received enough results. (E.g. in the case of Scope.LOCAL this
          would be after the one and only sequence of chunks has been received.). (local and remote)
        """
    @abc.abstractmethod
    def SparqlUpdate(
        self,
        request: iotics.api.meta_pb2.SparqlUpdateRequest,
        context: grpc.ServicerContext,
    ) -> iotics.api.meta_pb2.SparqlUpdateResponse:
        """SparqlUpdate performs a SPARQL 1.1 update. When performing an update, the update query must contain a reference to
        one of the following graph IRIs:
        1. http://data.iotics.com/graph#custom-public (aka custom public graph) - All metadata written to this graph will be
           visible during SPARQL queries both with local & global scope (and thus, the Iotics network).
        """

def add_MetaAPIServicer_to_server(servicer: MetaAPIServicer, server: grpc.Server) -> None: ...

"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import grpc
import iotics.api.common_pb2
import iotics.api.search_pb2
import typing

class SearchAPIStub:
    """---------------------------------------------------------------------------------------------------------------------

    SearchAPI provides a set of services to run synchronous and asynchronous search.
    """
    def __init__(self, channel: grpc.Channel) -> None: ...
    DispatchSearchRequest: grpc.UnaryUnaryMultiCallable[
        iotics.api.search_pb2.SearchRequest,
        iotics.api.search_pb2.DispatchSearchResponse]
    """Send a search request. Results are expected asynchronously."""

    SynchronousSearch: grpc.UnaryStreamMultiCallable[
        iotics.api.search_pb2.SearchRequest,
        iotics.api.search_pb2.SearchResponse]
    """Run a synchronous search based on a user timeout."""

    ReceiveAllSearchResponses: grpc.UnaryStreamMultiCallable[
        iotics.api.common_pb2.SubscriptionHeaders,
        iotics.api.search_pb2.SearchResponse]
    """Receive all search responses associated to a set of Search request for a given client application ID."""


class SearchAPIServicer(metaclass=abc.ABCMeta):
    """---------------------------------------------------------------------------------------------------------------------

    SearchAPI provides a set of services to run synchronous and asynchronous search.
    """
    @abc.abstractmethod
    def DispatchSearchRequest(self,
        request: iotics.api.search_pb2.SearchRequest,
        context: grpc.ServicerContext,
    ) -> iotics.api.search_pb2.DispatchSearchResponse:
        """Send a search request. Results are expected asynchronously."""
        pass

    @abc.abstractmethod
    def SynchronousSearch(self,
        request: iotics.api.search_pb2.SearchRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[iotics.api.search_pb2.SearchResponse]:
        """Run a synchronous search based on a user timeout."""
        pass

    @abc.abstractmethod
    def ReceiveAllSearchResponses(self,
        request: iotics.api.common_pb2.SubscriptionHeaders,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[iotics.api.search_pb2.SearchResponse]:
        """Receive all search responses associated to a set of Search request for a given client application ID."""
        pass


def add_SearchAPIServicer_to_server(servicer: SearchAPIServicer, server: grpc.Server) -> None: ...
